package com.rk.microserviceproj1_service.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;


import io.github.resilience4j.retry.annotation.Retry;
/** 
 * This is class is for circuit breaker.
 * Here if the /sample-api url will fail and then it call the fallbackMethod="hardcodedResponse"
 * And this is possible using resilience4j
 * */
@RestController
public class CircuitBreakerController {
	private Logger logger = LoggerFactory.getLogger(CircuitBreakerController.class);
	@GetMapping("/sample-api")
	@Retry(name="sample-api", fallbackMethod = "hardcodedResponse")
	public String sampleApi() {
		logger.info("Sample APi call received");
		ResponseEntity<String> forEntity = new RestTemplate().getForEntity("http://localhost:8080/some-dummy", String.class);
		return forEntity.getBody();
	}
	public String hardcodedResponse(Exception ex) {
		return "fallback-reponse";
	}
}
